from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from datetime import datetime
from sqlalchemy.orm import Session
from ..core.database import get_db
from ..services.schedule import ScheduleService
from .bot import dp

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π.\n\n"
        "üìÖ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="üìö –û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
                web_app=WebAppInfo(url="https://telegram-schedule-app.onrender.com")
            )
        ]])
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/groups - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
/schedule [ID –≥—Ä—É–ø–ø—ã] - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üì± *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É
3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º
    """
    await message.answer(help_text, parse_mode="Markdown")

@dp.message(Command("groups"))
async def cmd_groups(message: types.Message):
    try:
        db = next(get_db())
        groups = ScheduleService.get_all_groups(db)
        if groups:
            groups_text = "\n".join([f"‚Ä¢ {g['name']} (ID: {g['id']})" for g in groups])
            await message.answer(
                "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:*\n\n"
                f"{groups_text}\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –≥—Ä—É–ø–ø—ã –≤ –∫–æ–º–∞–Ω–¥–µ /schedule [ID]",
                parse_mode="Markdown"
            )
        else:
            await message.answer("‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")

@dp.message(Command("schedule"))
async def cmd_schedule(message: types.Message):
    try:
        cmd_parts = message.text.split()
        if len(cmd_parts) != 2:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã.\n"
                "üìù *–ü—Ä–∏–º–µ—Ä:* `/schedule 1`\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /groups –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø",
                parse_mode="Markdown"
            )
            return
        
        group_id = int(cmd_parts[1])
        today = datetime.now().strftime("%Y-%m-%d")
        
        db = next(get_db())
        schedule = ScheduleService.get_schedule_by_date(db, group_id, today)
        
        if not schedule:
            await message.answer(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {today} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        lessons = schedule.get('lessons', [])
        if not lessons:
            await message.answer("üì≠ –ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–∞—Ä –Ω–µ—Ç")
            return
            
        lessons_text = "\n\n".join([
            f"üïí *{lesson['time']}*\n"
            f"üìö {lesson['subject']}\n"
            f"üë®‚Äçüè´ {lesson['teacher']}\n"
            f"üèõ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson['classroom']}"
            for lesson in lessons
        ])
            
        await message.answer(
            f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {today}:*\n\n"
            f"{lessons_text}",
            parse_mode="Markdown"
        )
            
    except ValueError:
        await message.answer("‚ùå ID –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App"""
    try:
        data = message.web_app_data.data
        await message.answer(f"üì± –î–∞–Ω–Ω—ã–µ –∏–∑ Mini App: {data}")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App")
